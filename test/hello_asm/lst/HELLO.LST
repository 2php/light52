
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	src\hello.a51
	Object File:	bin\hello.hex
	List File:	lst\hello.lst



 Line  I  Addr  Code            Source

    1:				; hello.a51 -- 'Hello World' on serial console.
    2:				;
    3:				; This small program is meant to be run on a light52 MCU on actual hardware,
    4:				; as a first sanity check.
    5:				;
    6:				; This version of the program does not use interrupts.
    7:				;
    8:				; If this program runs and displays its message on a terminal, you may then be
    9:				; sure that your development environment is working.
   10:
   11:
   12:				        ; Include the definitions for the light52 derivative
   13:				        $nomod51
   14:				        $include (light52.mcu)
   15: 1			;   Light52 processor definition file (for ASEM-51 assembler)
   16: 1			;   =========================================================
   17: 1
   18: 1	N	 80	P0          DATA        080H
   19: 1	N	 81	SP          DATA        081H
   20: 1	N	 82	DPL         DATA        082H
   21: 1	N	 83	DPH         DATA        083H
   22: 1			;PCON      DATA        087H
   23: 1	N	 88	TSTAT       DATA        088H
   24: 1			;TMOD      DATA        089H
   25: 1	N	 8C	TL          DATA        08CH
   26: 1	N	 8D	TH          DATA        08DH
   27: 1	N	 8E	TCL         DATA        08EH
   28: 1	N	 8F	TCH         DATA        08FH
   29: 1	N	 90	P1          DATA        090H
   30: 1	N	 98	SCON        DATA        098H
   31: 1	N	 99	SBUF        DATA        099H
   32: 1	N	 A0	P2          DATA        0A0H
   33: 1	N	 A8	IE          DATA        0A8H
   34: 1	N	 B0	P3          DATA        0B0H
   35: 1			;IP        DATA        0B8H
   36: 1	N	 C0	EXTINT0     DATA        0C0H
   37: 1	N	 D0	PSW         DATA        0D0H
   38: 1	N	 E0	ACC         DATA        0E0H
   39: 1	N	 F0	B           DATA        0F0H
   40: 1
   41: 1			; TSTAT flags
   42: 1	N	 88	T0IRQ       BIT         088H
   43: 1	N	 8C	T0ARL       BIT         08CH

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1	N	 8D	T0CEN       BIT         08DH
   45: 1
   46: 1			; IE flags
   47: 1	N	 A8	EX0         BIT         0A8H
   48: 1	N	 A9	ET0         BIT         0A9H
   49: 1			;EX1         BIT        0AAH
   50: 1			;ET1         BIT        0ABH
   51: 1	N	 AC	ES          BIT         0ACH
   52: 1			;ET2         BIT        0ADH
   53: 1	N	 AF	EA          BIT         0AFH
   54: 1
   55: 1			; SCON flags
   56: 1	N	 98	TXIRQ       BIT         098H
   57: 1	N	 99	RXIRQ       BIT         099H
   58: 1	N	 9C	TXRDY       BIT         09CH
   59: 1	N	 9D	RXRDY       BIT         09DH
   60: 1
   61: 1			; PSW flags
   62: 1	N	 D0	P           BIT        0D0H
   63: 1	N	 D2	OV          BIT        0D2H
   64: 1	N	 D3	RS0         BIT        0D3H
   65: 1	N	 D4	RS1         BIT        0D4H
   66: 1	N	 D5	F0          BIT        0D5H
   67: 1	N	 D6	AC          BIT        0D6H
   68: 1	N	 D7	CY          BIT        0D7H
   69: 1
   70: 1			; Interrupt vectors
   71: 1	N      0000	RESET       CODE       000H
   72: 1	N      0003	EXTI0       CODE       003H
   73: 1	N      000B	TIMER0      CODE       00BH
   74: 1	N      0013	EXTI1       CODE       013H
   75: 1	N      001B	TIMER1      CODE       01BH
   76: 1	N      0023	SINT        CODE       023H
   77: 1	N      002B	TIMER2      CODE       02BH
   78:
   79:				        ;-- Data variable definitions ------------------------------------------
   80:
   81:				        ; These are general purpose variables for use in subroutines.
   82:				        ; They must be saved and restored before use.
   83:		N	 30	        var0    data    030h
   84:
   85:				        ; We'll place the stack above the reg banks and bit addressable area,
   86:				        ; leaving some space for our stuff (030h to 03fh).
   87:		N      0040	        stack   set     040h
   88:
   89:				        ;-- Macros -------------------------------------------------------------
   90:
   91:
   92:				        ;-- Reset & interrupt vectors ------------------------------------------
   93:
   94:		N      0000	        org     00h
   95:	  0000	02 00 30	        ljmp    start               ;
   96:		N      0003	        org     03h
   97:	  0003	02 00 6C	        ljmp    irq_unused
   98:		N      000B	        org     0bh
   99:	  000B	02 00 6E	        ljmp    irq_timer

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:		N      0013	        org     13h
  101:	  0013	02 00 6C	        ljmp    irq_unused
  102:		N      001B	        org     1bh
  103:	  001B	02 00 6C	        ljmp    irq_unused
  104:		N      0023	        org     23h
  105:	  0023	02 00 6D	        ljmp    irq_uart
  106:
  107:				        ;-- Main test program --------------------------------------------------
  108:		N      0030	        org     30h
  109:	  0030			start:
  110:
  111:				        ; Set up stack.
  112:	  0030	75 81 40	        mov     SP,#stack
  113:
  114:				        ; Clear ports P0 and P1, bearing in mind that on the demo platform,
  115:				        ; P0 is looped back into P2 and P1 to P3, and P1 is also connected to
  116:				        ; the external irq inputs.
  117:	  0033	75 80 00	        mov     P0,#000h
  118:	  0036	75 90 00	        mov     P1,#000h
  119:
  120:				        ; Initialize serial port...
  121:				        ; (actually, leave it with its default configuration: 19200-8-N-1)
  122:
  123:				        ; ...and dump the hello string to the serial port.
  124:	  0039	90 00 7E	        mov     DPTR,#text0
  125:	  003C	12 00 59	        call    po_cstr
  126:
  127:
  128:				        ; Ok, now
  129:	  003F	75 A8 00	        mov     IE,#000h
  130:	  0042	75 88 00	        mov     TSTAT,#000h
  131:	  0045	75 8F FC	        mov     TCH,#0fch
  132:	  0048	75 8E 50	        mov     TCL,#050h
  133:				        ; Enable timer interrupts and interrupts globally...
  134:	  004B	75 A8 82	        mov     IE,#082h
  135:				        ; ...and start the timer with autoreload.
  136:	  004E	75 88 30	        mov     TSTAT,#030h
  137:
  138:
  139:				        ; End of test program, enter single-instruction endless loop.
  140:				        ; The timer will keep triggering interrupts indefinitely.
  141:	  0051	01 51		quit:   ajmp    $
  142:
  143:				; po_char:  Print character in ACC to console.
  144:	  0053			po_char:
  145:	  0053	F5 99		        mov     SBUF,a
  146:	  0055			po_char_loop:
  147:	  0055	30 9C FD	        jnb     TXRDY,po_char_loop
  148:	  0058	22		        ret
  149:
  150:				; po_cstr:  Prints zero-terminated string at XCODE:DPTR to console.
  151:				;           Returns after the whole string has been output.
  152:	  0059			po_cstr:
  153:	  0059	C0 30		        push    var0
  154:	  005B	75 30 00	        mov     var0,#000h
  155:	  005E			po_cstr_loop:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:	  005E	E5 30		        mov     a,var0
  157:	  0060	05 30		        inc     var0
  158:	  0062	93		        movc    a,@a+DPTR
  159:	  0063	60 04		        jz      po_cstr_done
  160:	  0065	11 53		        call    po_char
  161:	  0067	80 F5		        sjmp    po_cstr_loop
  162:	  0069			po_cstr_done:
  163:	  0069	D0 30		        pop     var0
  164:	  006B	22		        ret
  165:
  166:				        ; Unused interrupt routines, will never be reached.
  167:	  006C			irq_unused:
  168:	  006C	32		        reti
  169:	  006D			irq_uart:
  170:	  006D	32		        reti
  171:
  172:				        ; This timer routine is meant to show that the timer works; all it
  173:				        ; does is display a message every timer interrupt.
  174:	  006E			irq_timer:
  175:	  006E	D2 88		        setb    TSTAT.0         ; Clear the timer irq flag writing a 1 on it
  176:	  0070	C0 83		        push    DPH             ; Write a short message to the console...
  177:	  0072	C0 82		        push    DPL
  178:	  0074	90 00 8E	        mov     DPTR,#text1
  179:	  0077	11 59		        call    po_cstr
  180:	  0079	D0 82		        pop     DPL             ; ...and quit
  181:	  007B	D0 83		        pop     DPH
  182:	  007D	32		        reti
  183:
  184:	  007E	48 65 6C 6C	text0:  db      'Hello World!',13,10,00h,00h
	  0082	6F 20 57 6F
	  0086	72 6C 64 21
	  008A	0D 0A 00 00
  185:	  008E	54 69 63 6B	text1:  db      'Tick!',13,10,00h
	  0092	21 0D 0A 00
  186:				        end





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6	  67
ACC				  DATA	      E0	  38
B				  DATA	      F0	  39
CY				  BIT	      D7	  68
DPH				  DATA	      83	  21
DPL				  DATA	      82	  20
EA				  BIT	      AF	  53
ES				  BIT	      AC	  51
ET0				  BIT	      A9	  48
EX0				  BIT	      A8	  47
EXTI0				  CODE	    0003	  72
EXTI1				  CODE	    0013	  74
EXTINT0				  DATA	      C0	  36
F0				  BIT	      D5	  66
IE				  DATA	      A8	  33
IRQ_TIMER			  CODE	    006E	 174
IRQ_UART			  CODE	    006D	 169
IRQ_UNUSED			  CODE	    006C	 167
OV				  BIT	      D2	  63
P				  BIT	      D0	  62
P0				  DATA	      80	  18
P1				  DATA	      90	  29
P2				  DATA	      A0	  32
P3				  DATA	      B0	  34
PO_CHAR				  CODE	    0053	 144
PO_CHAR_LOOP			  CODE	    0055	 146
PO_CSTR				  CODE	    0059	 152
PO_CSTR_DONE			  CODE	    0069	 162
PO_CSTR_LOOP			  CODE	    005E	 155
PSW				  DATA	      D0	  37
QUIT				  CODE	    0051	 141
RESET				  CODE	    0000	  71
RS0				  BIT	      D3	  64
RS1				  BIT	      D4	  65
RXIRQ				  BIT	      99	  57
RXRDY				  BIT	      9D	  59
SBUF				  DATA	      99	  31
SCON				  DATA	      98	  30
SINT				  CODE	    0023	  76
SP				  DATA	      81	  19
STACK				  NUMBER    0040	  87
START				  CODE	    0030	 109
T0ARL				  BIT	      8C	  43
T0CEN				  BIT	      8D	  44
T0IRQ				  BIT	      88	  42
TCH				  DATA	      8F	  28
TCL				  DATA	      8E	  27
TEXT0				  CODE	    007E	 184

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TEXT1				  CODE	    008E	 185
TH				  DATA	      8D	  26
TIMER0				  CODE	    000B	  73
TIMER1				  CODE	    001B	  75
TIMER2				  CODE	    002B	  77
TL				  DATA	      8C	  25
TSTAT				  DATA	      88	  23
TXIRQ				  BIT	      98	  56
TXRDY				  BIT	      9C	  58
VAR0				  DATA	      30	  83
