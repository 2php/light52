
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	src\irq_test.a51
	Object File:	bin\irq_test.hex
	List File:	lst\irq_test.lst



 Line  I  Addr  Code            Source

    1:				; irq_test.a51 -- First interrupt srvice test.
    2:				;
    3:				; This program is meant to run on a light53 MCU with the 16-bit timer. It can be
    4:				; run on simulation or in actual hardware.
    5:				; Its purpose is to demonstrate the working of the interrupt service logic. No
    6:				; actual tests are performed (other than the co-simulation tests), only checks.
    7:				;
    8:
    9:				        ;-----------------------------------------------------------------------
   10:
   11:		N      0060	ext_irq_ctr     set     060h        ; Incremented by external irq routine
   12:
   13:				; Define addresses of non-standard timer SFRs.
   14:				; FIXME this shoud be defined in a separate include file
   15:		N      0088	TSTAT           set     088h        ; Control/status register
   16:		N      008C	TL              set     08ch        ; Counter register, low byte
   17:		N      008D	TH              set     08dh        ; Counter register, high byte
   18:		N      008E	TCL             set     08eh        ; Compare register, low byte
   19:		N      008F	TCH             set     08fh        ; Compare register, high byte
   20:
   21:		N      00C0	EXTINT          set     0c0h        ; External interrupt register
   22:
   23:				        ;-- Macros -------------------------------------------------------------
   24:
   25:				        ; putc: send character in A to console (UART)
   26:				putc    macro   character
   27:				        local   putc_loop
   28:				        mov     SBUF,character
   29:				putc_loop:
   30:				        ;mov     a,SCON
   31:				        ;anl     a,#10h
   32:				        ;jz      putc_loop
   33:				        endm
   34:
   35:				        ; put_crlf: send CR+LF to console
   36:				put_crlf macro
   37:				        putc    #13
   38:				        putc    #10
   39:				        endm
   40:
   41:
   42:				        ;-- Reset & interrupt vectors ------------------------------------------
   43:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:		N      0000	        org     00h
   45:	  0000	02 00 30	        ljmp    start               ;
   46:		N      0003	        org     03h
   47:	  0003	02 00 D4	        ljmp    irq_ext
   48:		N      000B	        org     0bh
   49:	  000B	02 00 E2	        ljmp    irq_timer
   50:		N      0013	        org     13h
   51:	  0013	02 00 E2	        ljmp    irq_wrong
   52:		N      001B	        org     1bh
   53:	  001B	02 00 E2	        ljmp    irq_wrong
   54:		N      0023	        org     23h
   55:	  0023	02 00 E2	        ljmp    irq_wrong
   56:
   57:
   58:				        ;-- Main test program --------------------------------------------------
   59:		N      0030	        org     30h
   60:	  0030			start:
   61:
   62:				        ; Disable all interrupts.
   63:	  0030	75 A8 00	        mov     IE,#00
   64:
   65:
   66:				        ;---- External interrupt test --------------------------------------
   67:
   68:				        ; Trigger external IRQ with IRQs disabled, it should be ignored.
   69:	  0033	75 90 01	        mov     P1,#01h
   70:	  0036	00		        nop
   71:	  0037	00		        nop
   72:	  0038	00		        nop
   73:	  0039	E5 60		        mov     a,ext_irq_ctr
   74:	  003B	B4 00 7F	        cjne    a,#00,fail_unexpected
   75:	  003E	D2 C0		        setb    EXTINT.0            ; Clear external IRQ flag
   76:
   77:				        ; Trigger timer IRQ with external IRQ enabled but global IE disabled
   78:	  0040	75 A8 01	        mov     IE,#01h
   79:	  0043	75 90 01	        mov     P1,#01h
   80:	  0046	00		        nop
   81:	  0047	00		        nop
   82:	  0048	00		        nop
   83:	  0049	E5 60		        mov     a,ext_irq_ctr
   84:	  004B	B4 00 6F	        cjne    a,#00,fail_unexpected
   85:	  004E	D2 C0		        setb    EXTINT.0           ; Clear timer IRQ flag
   86:
   87:				        ; Trigger external IRQ with external and global IRQ enabled
   88:	  0050	75 90 00	        mov     P1,#00h
   89:	  0053	75 A8 81	        mov     IE,#81h
   90:	  0056	75 60 00	        mov     ext_irq_ctr,#00
   91:	  0059	75 90 01	        mov     P1,#01h
   92:	  005C	00		        nop
   93:	  005D	00		        nop
   94:	  005E	00		        nop
   95:	  005F	E5 60		        mov     a,ext_irq_ctr
   96:	  0061	B4 01 4E	        cjne    a,#01,fail_expected
   97:	  0064	D2 C0		        setb    EXTINT.0           ; Clear timer IRQ flag
   98:
   99:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:				        ; End of irq test, print message and continue
  101:	  0066	90 01 08	        mov     DPTR,#text2
  102:	  0069	12 00 C8	        call    puts
  103:
  104:				        ;---- Timer test ---------------------------------------------------
  105:				        ; Assume the prescaler is set for a 20ms count period
  106:
  107:	  006C	75 A8 00	        mov     IE,#000h
  108:
  109:	  006F	75 88 00	        mov     TSTAT,#00
  110:	  0072	75 8D 00	        mov     TH,#00
  111:	  0075	75 8C 00	        mov     TL,#00
  112:	  0078	75 8F C3	        mov     TCH,#0c3h           ; Compare register = 50000 = 1 second
  113:	  007B	75 8E 50	        mov     TCL,#050h
  114:	  007E	75 88 30	        mov     TSTAT,#030h         ; Start counting
  115:
  116:				        ; Ok, now wait for a little less than 20us and make sure TH:TL has not
  117:				        ; changed yet.
  118:	  0081	78 5F		        mov     r0,#95              ; We need to wait for 950 clock cycles...
  119:	  0083			loop0:                              ; ...and this is a 10-clock loop
  120:	  0083	00		        nop
  121:	  0084	D8 FD		        djnz    r0,loop0
  122:	  0086	E5 8D		        mov     a,TH
  123:	  0088	B4 00 1C	        cjne    a,#000h,fail_timer_error
  124:	  008B	E5 8C		        mov     a,TL
  125:	  008D	B4 00 17	        cjne    a,#000h,fail_timer_error
  126:
  127:				        ; Now wait for another 100 clock cycles and make sure TH:TL has already
  128:				        ; changed.
  129:	  0090	78 0A		        mov     r0,#10              ; We need to wait for 100 clock cycles...
  130:	  0092			loop1:                              ; ...and this is a 10-clock loop
  131:	  0092	00		        nop
  132:	  0093	D8 FD		        djnz    r0,loop1
  133:	  0095	E5 8D		        mov     a,TH
  134:	  0097	B4 00 0D	        cjne    a,#000h,fail_timer_error
  135:	  009A	E5 8C		        mov     a,TL
  136:	  009C	B4 01 08	        cjne    a,#001h,fail_timer_error
  137:
  138:				        ; End of timer test, print message and continue
  139:	  009F	90 01 43	        mov     DPTR,#text5
  140:	  00A2	12 00 C8	        call    puts
  141:
  142:				        ;-- End of test program, enter single-instruction endless loop
  143:	  00A5	01 A5		quit:   ajmp    $
  144:
  145:
  146:	  00A7			fail_timer_error:
  147:	  00A7	90 01 35	        mov     DPTR,#text4
  148:	  00AA	12 00 C8	        call    puts
  149:	  00AD	75 A8 00	        mov     IE,#00h
  150:	  00B0	01 B0		        ajmp    $
  151:
  152:
  153:				        ; Did not get expected IRQ: print failure message and block.
  154:	  00B2			fail_expected:
  155:	  00B2	90 01 27	        mov     DPTR,#text3

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:	  00B5	12 00 C8	        call    puts
  157:	  00B8	75 A8 00	        mov     IE,#00h
  158:	  00BB	01 BB		        ajmp    $
  159:
  160:				        ; Got unexpected IRQ: print failure message and block.
  161:	  00BD			fail_unexpected:
  162:	  00BD	90 00 F6	        mov     DPTR,#text1
  163:	  00C0	12 00 C8	        call    puts
  164:	  00C3	75 A8 00	        mov     IE,#00h
  165:	  00C6	01 C6		        ajmp    $
  166:
  167:				;-- puts: output to UART a zero-terminated string at DPTR ----------------------
  168:	  00C8			puts:
  169:	  00C8	78 00		        mov     r0,#00h
  170:	  00CA			puts_loop:
  171:	  00CA	E8		        mov     a,r0
  172:	  00CB	08		        inc     r0
  173:	  00CC	93		        movc    a,@a+DPTR
  174:	  00CD	60 04		        jz      puts_done
  175:
  176:				        putc    a
  177+ 1  00CF	F5 99		        mov     SBUF,a
  178+ 1  00D1			??0000:
  179+ 1			        ;mov     a,SCON
  180+ 1			        ;anl     a,#10h
  181+ 1			        ;jz      putc_loop
  182:	  00D1	80 F7		        sjmp    puts_loop
  183:	  00D3			puts_done:
  184:	  00D3	22		        ret
  185:
  186:				;-- irq_timer: interrupt routine for timer -------------------------------------
  187:				; Note we don't bother to preserve any registers
  188:	  00D4			irq_ext:
  189:	  00D4	75 90 00	        mov     P1,#00h             ; Remove the external interrupt request
  190:	  00D7	75 C0 FF	        mov     EXTINT,#0ffh        ; Clear all external IRQ flags
  191:	  00DA	05 60		        inc     ext_irq_ctr         ; Increment irq counter
  192:	  00DC	90 00 E4	        mov     DPTR,#text0         ; Print IRQ message...
  193:	  00DF	11 C8		        call    puts
  194:	  00E1	32		        reti                        ; ...and quit
  195:
  196:	  00E2			irq_timer:
  197:	  00E2			irq_wrong:
  198:	  00E2	01 E2		        ajmp    irq_wrong
  199:
  200:
  201:
  202:
  203:	  00E4	3C 45 78 74	text0:  db      '<External irq>',13,10,00h,00h
	  00E8	65 72 6E 61
	  00EC	6C 20 69 72
	  00F0	71 3E 0D 0A
	  00F4	00 00
  204:	  00F6	55 6E 65 78	text1:  db      'Unexpected IRQ',13,10,00h,00h
	  00FA	70 65 63 74
	  00FE	65 64 20 49
	  0102	52 51 0D 0A

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

	  0106	00 00
  205:	  0108	49 52 51 20	text2:  db      'IRQ test finished, no errors',13,10,0
	  010C	74 65 73 74
	  0110	20 66 69 6E
	  0114	69 73 68 65
	  0118	64 2C 20 6E
	  011C	6F 20 65 72
	  0120	72 6F 72 73
	  0124	0D 0A 00
  206:	  0127	4D 69 73 73	text3:  db      'Missing IRQ',13,10,0
	  012B	69 6E 67 20
	  012F	49 52 51 0D
	  0133	0A 00
  207:	  0135	54 69 6D 65	text4:  db      'Timer error',13,10,0
	  0139	72 20 65 72
	  013D	72 6F 72 0D
	  0141	0A 00
  208:	  0143	54 69 6D 65	text5:  db      'Timer test finished, no errors',13,10,0
	  0147	72 20 74 65
	  014B	73 74 20 66
	  014F	69 6E 69 73
	  0153	68 65 64 2C
	  0157	20 6E 6F 20
	  015B	65 72 72 6F
	  015F	72 73 0D 0A
	  0163	00
  209:
  210:				        end





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??0000				  CODE	    00D1	 178
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CY				  BIT	      D7
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
EXTINT				  NUMBER    00C0	  21
EXT_IRQ_CTR			  NUMBER    0060	  11
F0				  BIT	      D5
FAIL_EXPECTED			  CODE	    00B2	 154
FAIL_TIMER_ERROR		  CODE	    00A7	 146
FAIL_UNEXPECTED			  CODE	    00BD	 161
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IRQ_EXT				  CODE	    00D4	 188
IRQ_TIMER			  CODE	    00E2	 196
IRQ_WRONG			  CODE	    00E2	 197
IT0				  BIT	      88
IT1				  BIT	      8A
LOOP0				  CODE	    0083	 119
LOOP1				  CODE	    0092	 130
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PUTC				  MACRO	        	  26
PUTS				  CODE	    00C8	 168
PUTS_DONE			  CODE	    00D3	 183

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PUTS_LOOP			  CODE	    00CA	 170
PUT_CRLF			  MACRO	        	  36
PX0				  BIT	      B8
PX1				  BIT	      BA
QUIT				  CODE	    00A5	 143
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0030	  60
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCH				  NUMBER    008F	  19
TCL				  NUMBER    008E	  18
TCON				  DATA	      88
TEXT0				  CODE	    00E4	 203
TEXT1				  CODE	    00F6	 204
TEXT2				  CODE	    0108	 205
TEXT3				  CODE	    0127	 206
TEXT4				  CODE	    0135	 207
TEXT5				  CODE	    0143	 208
TF0				  BIT	      8D
TF1				  BIT	      8F
TH				  NUMBER    008D	  17
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL				  NUMBER    008C	  16
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TSTAT				  NUMBER    0088	  15
TXD				  BIT	      B1
WR				  BIT	      B6
