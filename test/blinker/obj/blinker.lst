                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                              4 ; This file was generated Wed Mar  7 19:51:11 2018
                              5 ;--------------------------------------------------------
                              6 	.module blinker
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _soc_get_msecs
                             14 	.globl _soc_init
                             15 	.globl _printf
                             16 	.globl _P3_7
                             17 	.globl _P3_6
                             18 	.globl _P3_5
                             19 	.globl _P3_4
                             20 	.globl _P3_3
                             21 	.globl _P3_2
                             22 	.globl _P3_1
                             23 	.globl _P3_0
                             24 	.globl _P2_7
                             25 	.globl _P2_6
                             26 	.globl _P2_5
                             27 	.globl _P2_4
                             28 	.globl _P2_3
                             29 	.globl _P2_2
                             30 	.globl _P2_1
                             31 	.globl _P2_0
                             32 	.globl _P1_7
                             33 	.globl _P1_6
                             34 	.globl _P1_5
                             35 	.globl _P1_4
                             36 	.globl _P1_3
                             37 	.globl _P1_2
                             38 	.globl _P1_1
                             39 	.globl _P1_0
                             40 	.globl _P0_7
                             41 	.globl _P0_6
                             42 	.globl _P0_5
                             43 	.globl _P0_4
                             44 	.globl _P0_3
                             45 	.globl _P0_2
                             46 	.globl _P0_1
                             47 	.globl _P0_0
                             48 	.globl _EIRQ7
                             49 	.globl _EIRQ6
                             50 	.globl _EIRQ5
                             51 	.globl _EIRQ4
                             52 	.globl _EIRQ3
                             53 	.globl _EIRQ2
                             54 	.globl _EIRQ1
                             55 	.globl _EIRQ0
                             56 	.globl _T0CEN
                             57 	.globl _T0ARL
                             58 	.globl _T0IRQ
                             59 	.globl _RXRDY
                             60 	.globl _TXRDY
                             61 	.globl _RXIRQ
                             62 	.globl _TXIRQ
                             63 	.globl _EEX
                             64 	.globl _ET0
                             65 	.globl _ES
                             66 	.globl _EA
                             67 	.globl _P3
                             68 	.globl _P2
                             69 	.globl _P1
                             70 	.globl _P0
                             71 	.globl _EXTINT
                             72 	.globl _T0CH
                             73 	.globl _T0CL
                             74 	.globl _T0H
                             75 	.globl _T0L
                             76 	.globl _TCON
                             77 	.globl _SBPH
                             78 	.globl _SBPL
                             79 	.globl _SBUF
                             80 	.globl _SCON
                             81 	.globl _IE
                             82 ;--------------------------------------------------------
                             83 ; special function registers
                             84 ;--------------------------------------------------------
                             85 	.area RSEG    (ABS,DATA)
   0000                      86 	.org 0x0000
                     00A8    87 _IE	=	0x00a8
                     0098    88 _SCON	=	0x0098
                     0099    89 _SBUF	=	0x0099
                     009A    90 _SBPL	=	0x009a
                     009B    91 _SBPH	=	0x009b
                     0088    92 _TCON	=	0x0088
                     008C    93 _T0L	=	0x008c
                     008D    94 _T0H	=	0x008d
                     008E    95 _T0CL	=	0x008e
                     008F    96 _T0CH	=	0x008f
                     00C0    97 _EXTINT	=	0x00c0
                     0080    98 _P0	=	0x0080
                     0090    99 _P1	=	0x0090
                     00A0   100 _P2	=	0x00a0
                     00B0   101 _P3	=	0x00b0
                            102 ;--------------------------------------------------------
                            103 ; special function bits
                            104 ;--------------------------------------------------------
                            105 	.area RSEG    (ABS,DATA)
   0000                     106 	.org 0x0000
                     00AF   107 _EA	=	0x00af
                     00AC   108 _ES	=	0x00ac
                     00A9   109 _ET0	=	0x00a9
                     00A8   110 _EEX	=	0x00a8
                     009C   111 _TXIRQ	=	0x009c
                     009D   112 _RXIRQ	=	0x009d
                     009C   113 _TXRDY	=	0x009c
                     009D   114 _RXRDY	=	0x009d
                     0088   115 _T0IRQ	=	0x0088
                     008C   116 _T0ARL	=	0x008c
                     008D   117 _T0CEN	=	0x008d
                     00C0   118 _EIRQ0	=	0x00c0
                     00C1   119 _EIRQ1	=	0x00c1
                     00C2   120 _EIRQ2	=	0x00c2
                     00C3   121 _EIRQ3	=	0x00c3
                     00C4   122 _EIRQ4	=	0x00c4
                     00C5   123 _EIRQ5	=	0x00c5
                     00C6   124 _EIRQ6	=	0x00c6
                     00C7   125 _EIRQ7	=	0x00c7
                     0080   126 _P0_0	=	0x0080
                     0081   127 _P0_1	=	0x0081
                     0082   128 _P0_2	=	0x0082
                     0083   129 _P0_3	=	0x0083
                     0084   130 _P0_4	=	0x0084
                     0085   131 _P0_5	=	0x0085
                     0086   132 _P0_6	=	0x0086
                     0087   133 _P0_7	=	0x0087
                     0090   134 _P1_0	=	0x0090
                     0091   135 _P1_1	=	0x0091
                     0092   136 _P1_2	=	0x0092
                     0093   137 _P1_3	=	0x0093
                     0094   138 _P1_4	=	0x0094
                     0095   139 _P1_5	=	0x0095
                     0096   140 _P1_6	=	0x0096
                     0097   141 _P1_7	=	0x0097
                     00A0   142 _P2_0	=	0x00a0
                     00A1   143 _P2_1	=	0x00a1
                     00A2   144 _P2_2	=	0x00a2
                     00A3   145 _P2_3	=	0x00a3
                     00A4   146 _P2_4	=	0x00a4
                     00A5   147 _P2_5	=	0x00a5
                     00A6   148 _P2_6	=	0x00a6
                     00A7   149 _P2_7	=	0x00a7
                     00B0   150 _P3_0	=	0x00b0
                     00B1   151 _P3_1	=	0x00b1
                     00B2   152 _P3_2	=	0x00b2
                     00B3   153 _P3_3	=	0x00b3
                     00B4   154 _P3_4	=	0x00b4
                     00B5   155 _P3_5	=	0x00b5
                     00B6   156 _P3_6	=	0x00b6
                     00B7   157 _P3_7	=	0x00b7
                            158 ;--------------------------------------------------------
                            159 ; overlayable register banks
                            160 ;--------------------------------------------------------
                            161 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     162 	.ds 8
                            163 ;--------------------------------------------------------
                            164 ; internal ram data
                            165 ;--------------------------------------------------------
                            166 	.area DSEG    (DATA)
                            167 ;--------------------------------------------------------
                            168 ; overlayable items in internal ram 
                            169 ;--------------------------------------------------------
                            170 ;--------------------------------------------------------
                            171 ; Stack segment in internal ram 
                            172 ;--------------------------------------------------------
                            173 	.area	SSEG	(DATA)
   0000                     174 __start__stack:
   0000                     175 	.ds	1
                            176 
                            177 ;--------------------------------------------------------
                            178 ; indirectly addressable internal ram data
                            179 ;--------------------------------------------------------
                            180 	.area ISEG    (DATA)
                            181 ;--------------------------------------------------------
                            182 ; absolute internal ram data
                            183 ;--------------------------------------------------------
                            184 	.area IABS    (ABS,DATA)
                            185 	.area IABS    (ABS,DATA)
                            186 ;--------------------------------------------------------
                            187 ; bit data
                            188 ;--------------------------------------------------------
                            189 	.area BSEG    (BIT)
                            190 ;--------------------------------------------------------
                            191 ; paged external ram data
                            192 ;--------------------------------------------------------
                            193 	.area PSEG    (PAG,XDATA)
                            194 ;--------------------------------------------------------
                            195 ; external ram data
                            196 ;--------------------------------------------------------
                            197 	.area XSEG    (XDATA)
                            198 ;--------------------------------------------------------
                            199 ; absolute external ram data
                            200 ;--------------------------------------------------------
                            201 	.area XABS    (ABS,XDATA)
                            202 ;--------------------------------------------------------
                            203 ; external initialized ram data
                            204 ;--------------------------------------------------------
                            205 	.area XISEG   (XDATA)
                            206 	.area HOME    (CODE)
                            207 	.area GSINIT0 (CODE)
                            208 	.area GSINIT1 (CODE)
                            209 	.area GSINIT2 (CODE)
                            210 	.area GSINIT3 (CODE)
                            211 	.area GSINIT4 (CODE)
                            212 	.area GSINIT5 (CODE)
                            213 	.area GSINIT  (CODE)
                            214 	.area GSFINAL (CODE)
                            215 	.area CSEG    (CODE)
                            216 ;--------------------------------------------------------
                            217 ; interrupt vector 
                            218 ;--------------------------------------------------------
                            219 	.area HOME    (CODE)
   0000                     220 __interrupt_vect:
   0000 02r00r00      [24]  221 	ljmp	__sdcc_gsinit_startup
   0003 32            [24]  222 	reti
   0004                     223 	.ds	7
   000B 02r00r00      [24]  224 	ljmp	_timer0_isr
                            225 ;--------------------------------------------------------
                            226 ; global & static initialisations
                            227 ;--------------------------------------------------------
                            228 	.area HOME    (CODE)
                            229 	.area GSINIT  (CODE)
                            230 	.area GSFINAL (CODE)
                            231 	.area GSINIT  (CODE)
                            232 	.globl __sdcc_gsinit_startup
                            233 	.globl __sdcc_program_startup
                            234 	.globl __start__stack
                            235 	.globl __mcs51_genXINIT
                            236 	.globl __mcs51_genXRAMCLEAR
                            237 	.globl __mcs51_genRAMCLEAR
                            238 	.area GSFINAL (CODE)
   0000 02r00r0E      [24]  239 	ljmp	__sdcc_program_startup
                            240 ;--------------------------------------------------------
                            241 ; Home
                            242 ;--------------------------------------------------------
                            243 	.area HOME    (CODE)
                            244 	.area HOME    (CODE)
   000E                     245 __sdcc_program_startup:
   000E 02r00r00      [24]  246 	ljmp	_main
                            247 ;	return from main will return to caller
                            248 ;--------------------------------------------------------
                            249 ; code
                            250 ;--------------------------------------------------------
                            251 	.area CSEG    (CODE)
                            252 ;------------------------------------------------------------
                            253 ;Allocation info for local variables in function 'main'
                            254 ;------------------------------------------------------------
                            255 ;msecs                     Allocated to registers r4 r5 r6 r7 
                            256 ;secs                      Allocated to registers r4 r5 r6 r7 
                            257 ;------------------------------------------------------------
                            258 ;	src/blinker.c:18: void main(void){
                            259 ;	-----------------------------------------
                            260 ;	 function main
                            261 ;	-----------------------------------------
   0000                     262 _main:
                     0007   263 	ar7 = 0x07
                     0006   264 	ar6 = 0x06
                     0005   265 	ar5 = 0x05
                     0004   266 	ar4 = 0x04
                     0003   267 	ar3 = 0x03
                     0002   268 	ar2 = 0x02
                     0001   269 	ar1 = 0x01
                     0000   270 	ar0 = 0x00
                            271 ;	src/blinker.c:23: soc_init();
   0000 12r00r00      [24]  272 	lcall	_soc_init
                            273 ;	src/blinker.c:26: printf("\n\r");
   0003 74r00         [12]  274 	mov	a,#__str_0
   0005 C0 E0         [24]  275 	push	acc
   0007 74s00         [12]  276 	mov	a,#(__str_0 >> 8)
   0009 C0 E0         [24]  277 	push	acc
   000B 74 80         [12]  278 	mov	a,#0x80
   000D C0 E0         [24]  279 	push	acc
   000F 12r00r00      [24]  280 	lcall	_printf
   0012 15 81         [12]  281 	dec	sp
   0014 15 81         [12]  282 	dec	sp
   0016 15 81         [12]  283 	dec	sp
                            284 ;	src/blinker.c:27: printf("Light52 project -- " __DATE__ "\n\n\r");
   0018 74r03         [12]  285 	mov	a,#__str_1
   001A C0 E0         [24]  286 	push	acc
   001C 74s00         [12]  287 	mov	a,#(__str_1 >> 8)
   001E C0 E0         [24]  288 	push	acc
   0020 74 80         [12]  289 	mov	a,#0x80
   0022 C0 E0         [24]  290 	push	acc
   0024 12r00r00      [24]  291 	lcall	_printf
   0027 15 81         [12]  292 	dec	sp
   0029 15 81         [12]  293 	dec	sp
   002B 15 81         [12]  294 	dec	sp
                            295 ;	src/blinker.c:28: printf("LED blinker test.\n\r");
   002D 74r25         [12]  296 	mov	a,#__str_2
   002F C0 E0         [24]  297 	push	acc
   0031 74s00         [12]  298 	mov	a,#(__str_2 >> 8)
   0033 C0 E0         [24]  299 	push	acc
   0035 74 80         [12]  300 	mov	a,#0x80
   0037 C0 E0         [24]  301 	push	acc
   0039 12r00r00      [24]  302 	lcall	_printf
   003C 15 81         [12]  303 	dec	sp
   003E 15 81         [12]  304 	dec	sp
   0040 15 81         [12]  305 	dec	sp
                            306 ;	src/blinker.c:30: while(1){
   0042                     307 00102$:
                            308 ;	src/blinker.c:31: msecs = soc_get_msecs();
   0042 12r00r00      [24]  309 	lcall	_soc_get_msecs
   0045 AC 82         [24]  310 	mov	r4,dpl
   0047 AD 83         [24]  311 	mov	r5,dph
   0049 AE F0         [24]  312 	mov	r6,b
   004B FF            [12]  313 	mov	r7,a
                            314 ;	src/blinker.c:32: secs = msecs/1000;
   004C 75*00 E8      [24]  315 	mov	__divulong_PARM_2,#0xE8
   004F 75*01 03      [24]  316 	mov	(__divulong_PARM_2 + 1),#0x03
   0052 E4            [12]  317 	clr	a
   0053 F5*02         [12]  318 	mov	(__divulong_PARM_2 + 2),a
   0055 F5*03         [12]  319 	mov	(__divulong_PARM_2 + 3),a
   0057 8C 82         [24]  320 	mov	dpl,r4
   0059 8D 83         [24]  321 	mov	dph,r5
   005B 8E F0         [24]  322 	mov	b,r6
   005D EF            [12]  323 	mov	a,r7
   005E 12r00r00      [24]  324 	lcall	__divulong
   0061 AC 82         [24]  325 	mov	r4,dpl
   0063 AD 83         [24]  326 	mov	r5,dph
   0065 AE F0         [24]  327 	mov	r6,b
   0067 FF            [12]  328 	mov	r7,a
                            329 ;	src/blinker.c:33: P0 = (uint8_t)(secs & 0xff);
   0068 8C 00         [24]  330 	mov	ar0,r4
   006A 79 00         [12]  331 	mov	r1,#0x00
   006C 7A 00         [12]  332 	mov	r2,#0x00
   006E 7B 00         [12]  333 	mov	r3,#0x00
   0070 88 80         [24]  334 	mov	_P0,r0
                            335 ;	src/blinker.c:34: P1 = (uint8_t)((secs>>8) & 0xff);
   0072 8D 04         [24]  336 	mov	ar4,r5
   0074 8C 90         [24]  337 	mov	_P1,r4
   0076 80 CA         [24]  338 	sjmp	00102$
                            339 	.area CSEG    (CODE)
                            340 	.area CONST   (CODE)
   0000                     341 __str_0:
   0000 0A                  342 	.db 0x0A
   0001 0D                  343 	.db 0x0D
   0002 00                  344 	.db 0x00
   0003                     345 __str_1:
   0003 4C 69 67 68 74 35   346 	.ascii "Light52 project -- Mar  7 2018"
        32 20 70 72 6F 6A
        65 63 74 20 2D 2D
        20 4D 61 72 20 20
        37 20 32 30 31 38
   0021 0A                  347 	.db 0x0A
   0022 0A                  348 	.db 0x0A
   0023 0D                  349 	.db 0x0D
   0024 00                  350 	.db 0x00
   0025                     351 __str_2:
   0025 4C 45 44 20 62 6C   352 	.ascii "LED blinker test."
        69 6E 6B 65 72 20
        74 65 73 74 2E
   0036 0A                  353 	.db 0x0A
   0037 0D                  354 	.db 0x0D
   0038 00                  355 	.db 0x00
                            356 	.area XINIT   (CODE)
                            357 	.area CABS    (ABS,CODE)
