                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                              4 ; This file was generated Fri Mar  9 21:33:59 2018
                              5 ;--------------------------------------------------------
                              6 	.module blinker
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _soc_get_msecs
                             14 	.globl _soc_init
                             15 	.globl _printf
                             16 	.globl _P3_7
                             17 	.globl _P3_6
                             18 	.globl _P3_5
                             19 	.globl _P3_4
                             20 	.globl _P3_3
                             21 	.globl _P3_2
                             22 	.globl _P3_1
                             23 	.globl _P3_0
                             24 	.globl _P2_7
                             25 	.globl _P2_6
                             26 	.globl _P2_5
                             27 	.globl _P2_4
                             28 	.globl _P2_3
                             29 	.globl _P2_2
                             30 	.globl _P2_1
                             31 	.globl _P2_0
                             32 	.globl _P1_7
                             33 	.globl _P1_6
                             34 	.globl _P1_5
                             35 	.globl _P1_4
                             36 	.globl _P1_3
                             37 	.globl _P1_2
                             38 	.globl _P1_1
                             39 	.globl _P1_0
                             40 	.globl _P0_7
                             41 	.globl _P0_6
                             42 	.globl _P0_5
                             43 	.globl _P0_4
                             44 	.globl _P0_3
                             45 	.globl _P0_2
                             46 	.globl _P0_1
                             47 	.globl _P0_0
                             48 	.globl _EIRQ7
                             49 	.globl _EIRQ6
                             50 	.globl _EIRQ5
                             51 	.globl _EIRQ4
                             52 	.globl _EIRQ3
                             53 	.globl _EIRQ2
                             54 	.globl _EIRQ1
                             55 	.globl _EIRQ0
                             56 	.globl _T0CEN
                             57 	.globl _T0ARL
                             58 	.globl _T0IRQ
                             59 	.globl _RXRDY
                             60 	.globl _TXRDY
                             61 	.globl _RXIRQ
                             62 	.globl _TXIRQ
                             63 	.globl _EEX
                             64 	.globl _ET0
                             65 	.globl _ES
                             66 	.globl _EA
                             67 	.globl _P3
                             68 	.globl _P2
                             69 	.globl _P1
                             70 	.globl _P0
                             71 	.globl _EXTINT
                             72 	.globl _T0CH
                             73 	.globl _T0CL
                             74 	.globl _T0H
                             75 	.globl _T0L
                             76 	.globl _TCON
                             77 	.globl _SBPH
                             78 	.globl _SBPL
                             79 	.globl _SBUF
                             80 	.globl _SCON
                             81 	.globl _IE
                             82 ;--------------------------------------------------------
                             83 ; special function registers
                             84 ;--------------------------------------------------------
                             85 	.area RSEG    (ABS,DATA)
   0000                      86 	.org 0x0000
                     00A8    87 G$IE$0$0 == 0x00a8
                     00A8    88 _IE	=	0x00a8
                     0098    89 G$SCON$0$0 == 0x0098
                     0098    90 _SCON	=	0x0098
                     0099    91 G$SBUF$0$0 == 0x0099
                     0099    92 _SBUF	=	0x0099
                     009A    93 G$SBPL$0$0 == 0x009a
                     009A    94 _SBPL	=	0x009a
                     009B    95 G$SBPH$0$0 == 0x009b
                     009B    96 _SBPH	=	0x009b
                     0088    97 G$TCON$0$0 == 0x0088
                     0088    98 _TCON	=	0x0088
                     008C    99 G$T0L$0$0 == 0x008c
                     008C   100 _T0L	=	0x008c
                     008D   101 G$T0H$0$0 == 0x008d
                     008D   102 _T0H	=	0x008d
                     008E   103 G$T0CL$0$0 == 0x008e
                     008E   104 _T0CL	=	0x008e
                     008F   105 G$T0CH$0$0 == 0x008f
                     008F   106 _T0CH	=	0x008f
                     00C0   107 G$EXTINT$0$0 == 0x00c0
                     00C0   108 _EXTINT	=	0x00c0
                     0080   109 G$P0$0$0 == 0x0080
                     0080   110 _P0	=	0x0080
                     0090   111 G$P1$0$0 == 0x0090
                     0090   112 _P1	=	0x0090
                     00A0   113 G$P2$0$0 == 0x00a0
                     00A0   114 _P2	=	0x00a0
                     00B0   115 G$P3$0$0 == 0x00b0
                     00B0   116 _P3	=	0x00b0
                            117 ;--------------------------------------------------------
                            118 ; special function bits
                            119 ;--------------------------------------------------------
                            120 	.area RSEG    (ABS,DATA)
   0000                     121 	.org 0x0000
                     00AF   122 G$EA$0$0 == 0x00af
                     00AF   123 _EA	=	0x00af
                     00AC   124 G$ES$0$0 == 0x00ac
                     00AC   125 _ES	=	0x00ac
                     00A9   126 G$ET0$0$0 == 0x00a9
                     00A9   127 _ET0	=	0x00a9
                     00A8   128 G$EEX$0$0 == 0x00a8
                     00A8   129 _EEX	=	0x00a8
                     009C   130 G$TXIRQ$0$0 == 0x009c
                     009C   131 _TXIRQ	=	0x009c
                     009D   132 G$RXIRQ$0$0 == 0x009d
                     009D   133 _RXIRQ	=	0x009d
                     009C   134 G$TXRDY$0$0 == 0x009c
                     009C   135 _TXRDY	=	0x009c
                     009D   136 G$RXRDY$0$0 == 0x009d
                     009D   137 _RXRDY	=	0x009d
                     0088   138 G$T0IRQ$0$0 == 0x0088
                     0088   139 _T0IRQ	=	0x0088
                     008C   140 G$T0ARL$0$0 == 0x008c
                     008C   141 _T0ARL	=	0x008c
                     008D   142 G$T0CEN$0$0 == 0x008d
                     008D   143 _T0CEN	=	0x008d
                     00C0   144 G$EIRQ0$0$0 == 0x00c0
                     00C0   145 _EIRQ0	=	0x00c0
                     00C1   146 G$EIRQ1$0$0 == 0x00c1
                     00C1   147 _EIRQ1	=	0x00c1
                     00C2   148 G$EIRQ2$0$0 == 0x00c2
                     00C2   149 _EIRQ2	=	0x00c2
                     00C3   150 G$EIRQ3$0$0 == 0x00c3
                     00C3   151 _EIRQ3	=	0x00c3
                     00C4   152 G$EIRQ4$0$0 == 0x00c4
                     00C4   153 _EIRQ4	=	0x00c4
                     00C5   154 G$EIRQ5$0$0 == 0x00c5
                     00C5   155 _EIRQ5	=	0x00c5
                     00C6   156 G$EIRQ6$0$0 == 0x00c6
                     00C6   157 _EIRQ6	=	0x00c6
                     00C7   158 G$EIRQ7$0$0 == 0x00c7
                     00C7   159 _EIRQ7	=	0x00c7
                     0080   160 G$P0_0$0$0 == 0x0080
                     0080   161 _P0_0	=	0x0080
                     0081   162 G$P0_1$0$0 == 0x0081
                     0081   163 _P0_1	=	0x0081
                     0082   164 G$P0_2$0$0 == 0x0082
                     0082   165 _P0_2	=	0x0082
                     0083   166 G$P0_3$0$0 == 0x0083
                     0083   167 _P0_3	=	0x0083
                     0084   168 G$P0_4$0$0 == 0x0084
                     0084   169 _P0_4	=	0x0084
                     0085   170 G$P0_5$0$0 == 0x0085
                     0085   171 _P0_5	=	0x0085
                     0086   172 G$P0_6$0$0 == 0x0086
                     0086   173 _P0_6	=	0x0086
                     0087   174 G$P0_7$0$0 == 0x0087
                     0087   175 _P0_7	=	0x0087
                     0090   176 G$P1_0$0$0 == 0x0090
                     0090   177 _P1_0	=	0x0090
                     0091   178 G$P1_1$0$0 == 0x0091
                     0091   179 _P1_1	=	0x0091
                     0092   180 G$P1_2$0$0 == 0x0092
                     0092   181 _P1_2	=	0x0092
                     0093   182 G$P1_3$0$0 == 0x0093
                     0093   183 _P1_3	=	0x0093
                     0094   184 G$P1_4$0$0 == 0x0094
                     0094   185 _P1_4	=	0x0094
                     0095   186 G$P1_5$0$0 == 0x0095
                     0095   187 _P1_5	=	0x0095
                     0096   188 G$P1_6$0$0 == 0x0096
                     0096   189 _P1_6	=	0x0096
                     0097   190 G$P1_7$0$0 == 0x0097
                     0097   191 _P1_7	=	0x0097
                     00A0   192 G$P2_0$0$0 == 0x00a0
                     00A0   193 _P2_0	=	0x00a0
                     00A1   194 G$P2_1$0$0 == 0x00a1
                     00A1   195 _P2_1	=	0x00a1
                     00A2   196 G$P2_2$0$0 == 0x00a2
                     00A2   197 _P2_2	=	0x00a2
                     00A3   198 G$P2_3$0$0 == 0x00a3
                     00A3   199 _P2_3	=	0x00a3
                     00A4   200 G$P2_4$0$0 == 0x00a4
                     00A4   201 _P2_4	=	0x00a4
                     00A5   202 G$P2_5$0$0 == 0x00a5
                     00A5   203 _P2_5	=	0x00a5
                     00A6   204 G$P2_6$0$0 == 0x00a6
                     00A6   205 _P2_6	=	0x00a6
                     00A7   206 G$P2_7$0$0 == 0x00a7
                     00A7   207 _P2_7	=	0x00a7
                     00B0   208 G$P3_0$0$0 == 0x00b0
                     00B0   209 _P3_0	=	0x00b0
                     00B1   210 G$P3_1$0$0 == 0x00b1
                     00B1   211 _P3_1	=	0x00b1
                     00B2   212 G$P3_2$0$0 == 0x00b2
                     00B2   213 _P3_2	=	0x00b2
                     00B3   214 G$P3_3$0$0 == 0x00b3
                     00B3   215 _P3_3	=	0x00b3
                     00B4   216 G$P3_4$0$0 == 0x00b4
                     00B4   217 _P3_4	=	0x00b4
                     00B5   218 G$P3_5$0$0 == 0x00b5
                     00B5   219 _P3_5	=	0x00b5
                     00B6   220 G$P3_6$0$0 == 0x00b6
                     00B6   221 _P3_6	=	0x00b6
                     00B7   222 G$P3_7$0$0 == 0x00b7
                     00B7   223 _P3_7	=	0x00b7
                            224 ;--------------------------------------------------------
                            225 ; overlayable register banks
                            226 ;--------------------------------------------------------
                            227 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     228 	.ds 8
                            229 ;--------------------------------------------------------
                            230 ; internal ram data
                            231 ;--------------------------------------------------------
                            232 	.area DSEG    (DATA)
                            233 ;--------------------------------------------------------
                            234 ; overlayable items in internal ram 
                            235 ;--------------------------------------------------------
                            236 ;--------------------------------------------------------
                            237 ; Stack segment in internal ram 
                            238 ;--------------------------------------------------------
                            239 	.area	SSEG	(DATA)
   0000                     240 __start__stack:
   0000                     241 	.ds	1
                            242 
                            243 ;--------------------------------------------------------
                            244 ; indirectly addressable internal ram data
                            245 ;--------------------------------------------------------
                            246 	.area ISEG    (DATA)
                            247 ;--------------------------------------------------------
                            248 ; absolute internal ram data
                            249 ;--------------------------------------------------------
                            250 	.area IABS    (ABS,DATA)
                            251 	.area IABS    (ABS,DATA)
                            252 ;--------------------------------------------------------
                            253 ; bit data
                            254 ;--------------------------------------------------------
                            255 	.area BSEG    (BIT)
                            256 ;--------------------------------------------------------
                            257 ; paged external ram data
                            258 ;--------------------------------------------------------
                            259 	.area PSEG    (PAG,XDATA)
                            260 ;--------------------------------------------------------
                            261 ; external ram data
                            262 ;--------------------------------------------------------
                            263 	.area XSEG    (XDATA)
                            264 ;--------------------------------------------------------
                            265 ; absolute external ram data
                            266 ;--------------------------------------------------------
                            267 	.area XABS    (ABS,XDATA)
                            268 ;--------------------------------------------------------
                            269 ; external initialized ram data
                            270 ;--------------------------------------------------------
                            271 	.area XISEG   (XDATA)
                            272 	.area HOME    (CODE)
                            273 	.area GSINIT0 (CODE)
                            274 	.area GSINIT1 (CODE)
                            275 	.area GSINIT2 (CODE)
                            276 	.area GSINIT3 (CODE)
                            277 	.area GSINIT4 (CODE)
                            278 	.area GSINIT5 (CODE)
                            279 	.area GSINIT  (CODE)
                            280 	.area GSFINAL (CODE)
                            281 	.area CSEG    (CODE)
                            282 ;--------------------------------------------------------
                            283 ; interrupt vector 
                            284 ;--------------------------------------------------------
                            285 	.area HOME    (CODE)
   0000                     286 __interrupt_vect:
   0000 02r00r00      [24]  287 	ljmp	__sdcc_gsinit_startup
   0003 32            [24]  288 	reti
   0004                     289 	.ds	7
   000B 02r00r00      [24]  290 	ljmp	_timer0_isr
                            291 ;--------------------------------------------------------
                            292 ; global & static initialisations
                            293 ;--------------------------------------------------------
                            294 	.area HOME    (CODE)
                            295 	.area GSINIT  (CODE)
                            296 	.area GSFINAL (CODE)
                            297 	.area GSINIT  (CODE)
                            298 	.globl __sdcc_gsinit_startup
                            299 	.globl __sdcc_program_startup
                            300 	.globl __start__stack
                            301 	.globl __mcs51_genXINIT
                            302 	.globl __mcs51_genXRAMCLEAR
                            303 	.globl __mcs51_genRAMCLEAR
                            304 	.area GSFINAL (CODE)
   0000 02r00r0E      [24]  305 	ljmp	__sdcc_program_startup
                            306 ;--------------------------------------------------------
                            307 ; Home
                            308 ;--------------------------------------------------------
                            309 	.area HOME    (CODE)
                            310 	.area HOME    (CODE)
   000E                     311 __sdcc_program_startup:
   000E 02r00r00      [24]  312 	ljmp	_main
                            313 ;	return from main will return to caller
                            314 ;--------------------------------------------------------
                            315 ; code
                            316 ;--------------------------------------------------------
                            317 	.area CSEG    (CODE)
                            318 ;------------------------------------------------------------
                            319 ;Allocation info for local variables in function 'main'
                            320 ;------------------------------------------------------------
                            321 ;msecs                     Allocated to registers r4 r5 r6 r7 
                            322 ;secs                      Allocated to registers r4 r5 r6 r7 
                            323 ;------------------------------------------------------------
                     0000   324 	G$main$0$0 ==.
                     0000   325 	C$blinker.c$18$0$0 ==.
                            326 ;	src/blinker.c:18: void main(void){
                            327 ;	-----------------------------------------
                            328 ;	 function main
                            329 ;	-----------------------------------------
   0000                     330 _main:
                     0007   331 	ar7 = 0x07
                     0006   332 	ar6 = 0x06
                     0005   333 	ar5 = 0x05
                     0004   334 	ar4 = 0x04
                     0003   335 	ar3 = 0x03
                     0002   336 	ar2 = 0x02
                     0001   337 	ar1 = 0x01
                     0000   338 	ar0 = 0x00
                     0000   339 	C$blinker.c$23$1$24 ==.
                            340 ;	src/blinker.c:23: soc_init();
   0000 12r00r00      [24]  341 	lcall	_soc_init
                     0003   342 	C$blinker.c$26$1$24 ==.
                            343 ;	src/blinker.c:26: printf("\n\r");
   0003 74r00         [12]  344 	mov	a,#__str_0
   0005 C0 E0         [24]  345 	push	acc
   0007 74s00         [12]  346 	mov	a,#(__str_0 >> 8)
   0009 C0 E0         [24]  347 	push	acc
   000B 74 80         [12]  348 	mov	a,#0x80
   000D C0 E0         [24]  349 	push	acc
   000F 12r00r00      [24]  350 	lcall	_printf
   0012 15 81         [12]  351 	dec	sp
   0014 15 81         [12]  352 	dec	sp
   0016 15 81         [12]  353 	dec	sp
                     0018   354 	C$blinker.c$27$1$24 ==.
                            355 ;	src/blinker.c:27: printf("Light52 project -- " __DATE__ "\n\n\r");
   0018 74r03         [12]  356 	mov	a,#__str_1
   001A C0 E0         [24]  357 	push	acc
   001C 74s00         [12]  358 	mov	a,#(__str_1 >> 8)
   001E C0 E0         [24]  359 	push	acc
   0020 74 80         [12]  360 	mov	a,#0x80
   0022 C0 E0         [24]  361 	push	acc
   0024 12r00r00      [24]  362 	lcall	_printf
   0027 15 81         [12]  363 	dec	sp
   0029 15 81         [12]  364 	dec	sp
   002B 15 81         [12]  365 	dec	sp
                     002D   366 	C$blinker.c$28$1$24 ==.
                            367 ;	src/blinker.c:28: printf("LED blinker test.\n\r");
   002D 74r25         [12]  368 	mov	a,#__str_2
   002F C0 E0         [24]  369 	push	acc
   0031 74s00         [12]  370 	mov	a,#(__str_2 >> 8)
   0033 C0 E0         [24]  371 	push	acc
   0035 74 80         [12]  372 	mov	a,#0x80
   0037 C0 E0         [24]  373 	push	acc
   0039 12r00r00      [24]  374 	lcall	_printf
   003C 15 81         [12]  375 	dec	sp
   003E 15 81         [12]  376 	dec	sp
   0040 15 81         [12]  377 	dec	sp
                     0042   378 	C$blinker.c$30$1$24 ==.
                            379 ;	src/blinker.c:30: while(1){
   0042                     380 00102$:
                     0042   381 	C$blinker.c$31$2$25 ==.
                            382 ;	src/blinker.c:31: msecs = soc_get_msecs();
   0042 12r00r00      [24]  383 	lcall	_soc_get_msecs
   0045 AC 82         [24]  384 	mov	r4,dpl
   0047 AD 83         [24]  385 	mov	r5,dph
   0049 AE F0         [24]  386 	mov	r6,b
   004B FF            [12]  387 	mov	r7,a
                     004C   388 	C$blinker.c$32$1$24 ==.
                            389 ;	src/blinker.c:32: secs = msecs/1000;
   004C 75*00 E8      [24]  390 	mov	__divulong_PARM_2,#0xE8
   004F 75*01 03      [24]  391 	mov	(__divulong_PARM_2 + 1),#0x03
   0052 E4            [12]  392 	clr	a
   0053 F5*02         [12]  393 	mov	(__divulong_PARM_2 + 2),a
   0055 F5*03         [12]  394 	mov	(__divulong_PARM_2 + 3),a
   0057 8C 82         [24]  395 	mov	dpl,r4
   0059 8D 83         [24]  396 	mov	dph,r5
   005B 8E F0         [24]  397 	mov	b,r6
   005D EF            [12]  398 	mov	a,r7
   005E 12r00r00      [24]  399 	lcall	__divulong
   0061 AC 82         [24]  400 	mov	r4,dpl
   0063 AD 83         [24]  401 	mov	r5,dph
   0065 AE F0         [24]  402 	mov	r6,b
   0067 FF            [12]  403 	mov	r7,a
                     0068   404 	C$blinker.c$33$2$25 ==.
                            405 ;	src/blinker.c:33: P0 = (uint8_t)(secs & 0xff);
   0068 8C 00         [24]  406 	mov	ar0,r4
   006A 79 00         [12]  407 	mov	r1,#0x00
   006C 7A 00         [12]  408 	mov	r2,#0x00
   006E 7B 00         [12]  409 	mov	r3,#0x00
   0070 88 80         [24]  410 	mov	_P0,r0
                     0072   411 	C$blinker.c$34$2$25 ==.
                            412 ;	src/blinker.c:34: P1 = (uint8_t)((secs>>8) & 0xff);
   0072 8D 04         [24]  413 	mov	ar4,r5
   0074 8C 90         [24]  414 	mov	_P1,r4
   0076 80 CA         [24]  415 	sjmp	00102$
                     0078   416 	C$blinker.c$37$1$24 ==.
                     0078   417 	XG$main$0$0 ==.
   0078 22            [24]  418 	ret
                            419 	.area CSEG    (CODE)
                            420 	.area CONST   (CODE)
                     0000   421 Fblinker$_str_0$0$0 == .
   0000                     422 __str_0:
   0000 0A                  423 	.db 0x0A
   0001 0D                  424 	.db 0x0D
   0002 00                  425 	.db 0x00
                     0003   426 Fblinker$_str_1$0$0 == .
   0003                     427 __str_1:
   0003 4C 69 67 68 74 35   428 	.ascii "Light52 project -- Mar  9 2018"
        32 20 70 72 6F 6A
        65 63 74 20 2D 2D
        20 4D 61 72 20 20
        39 20 32 30 31 38
   0021 0A                  429 	.db 0x0A
   0022 0A                  430 	.db 0x0A
   0023 0D                  431 	.db 0x0D
   0024 00                  432 	.db 0x00
                     0025   433 Fblinker$_str_2$0$0 == .
   0025                     434 __str_2:
   0025 4C 45 44 20 62 6C   435 	.ascii "LED blinker test."
        69 6E 6B 65 72 20
        74 65 73 74 2E
   0036 0A                  436 	.db 0x0A
   0037 0D                  437 	.db 0x0D
   0038 00                  438 	.db 0x00
                            439 	.area XINIT   (CODE)
                            440 	.area CABS    (ABS,CODE)
