                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Sun Sep 30 04:52:13 2012
                              5 ;--------------------------------------------------------
                              6 	.module hello
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _printf
                             14 	.globl _P3_7
                             15 	.globl _P3_6
                             16 	.globl _P3_5
                             17 	.globl _P3_4
                             18 	.globl _P3_3
                             19 	.globl _P3_2
                             20 	.globl _P3_1
                             21 	.globl _P3_0
                             22 	.globl _P2_7
                             23 	.globl _P2_6
                             24 	.globl _P2_5
                             25 	.globl _P2_4
                             26 	.globl _P2_3
                             27 	.globl _P2_2
                             28 	.globl _P2_1
                             29 	.globl _P2_0
                             30 	.globl _P1_7
                             31 	.globl _P1_6
                             32 	.globl _P1_5
                             33 	.globl _P1_4
                             34 	.globl _P1_3
                             35 	.globl _P1_2
                             36 	.globl _P1_1
                             37 	.globl _P1_0
                             38 	.globl _P0_7
                             39 	.globl _P0_6
                             40 	.globl _P0_5
                             41 	.globl _P0_4
                             42 	.globl _P0_3
                             43 	.globl _P0_2
                             44 	.globl _P0_1
                             45 	.globl _P0_0
                             46 	.globl _EIRQ7
                             47 	.globl _EIRQ6
                             48 	.globl _EIRQ5
                             49 	.globl _EIRQ4
                             50 	.globl _EIRQ3
                             51 	.globl _EIRQ2
                             52 	.globl _EIRQ1
                             53 	.globl _EIRQ0
                             54 	.globl _T0CEN
                             55 	.globl _T0ARL
                             56 	.globl _T0IRQ
                             57 	.globl _RXRDY
                             58 	.globl _TXRDY
                             59 	.globl _RXIRQ
                             60 	.globl _TXIRQ
                             61 	.globl _EEX
                             62 	.globl _ET0
                             63 	.globl _ES
                             64 	.globl _EA
                             65 	.globl _P3
                             66 	.globl _P2
                             67 	.globl _P1
                             68 	.globl _P0
                             69 	.globl _EXTINT
                             70 	.globl _T0CH
                             71 	.globl _T0CL
                             72 	.globl _T0H
                             73 	.globl _T0L
                             74 	.globl _TCON
                             75 	.globl _SBPH
                             76 	.globl _SBPL
                             77 	.globl _SBUF
                             78 	.globl _SCON
                             79 	.globl _IE
                             80 	.globl _putchar
                             81 ;--------------------------------------------------------
                             82 ; special function registers
                             83 ;--------------------------------------------------------
                             84 	.area RSEG    (ABS,DATA)
   0000                      85 	.org 0x0000
                    00A8     86 _IE	=	0x00a8
                    0098     87 _SCON	=	0x0098
                    0099     88 _SBUF	=	0x0099
                    009A     89 _SBPL	=	0x009a
                    009B     90 _SBPH	=	0x009b
                    0088     91 _TCON	=	0x0088
                    008C     92 _T0L	=	0x008c
                    008D     93 _T0H	=	0x008d
                    008E     94 _T0CL	=	0x008e
                    008F     95 _T0CH	=	0x008f
                    00C0     96 _EXTINT	=	0x00c0
                    0080     97 _P0	=	0x0080
                    0090     98 _P1	=	0x0090
                    00A0     99 _P2	=	0x00a0
                    00B0    100 _P3	=	0x00b0
                            101 ;--------------------------------------------------------
                            102 ; special function bits
                            103 ;--------------------------------------------------------
                            104 	.area RSEG    (ABS,DATA)
   0000                     105 	.org 0x0000
                    00AF    106 _EA	=	0x00af
                    00AC    107 _ES	=	0x00ac
                    00A9    108 _ET0	=	0x00a9
                    00A8    109 _EEX	=	0x00a8
                    009C    110 _TXIRQ	=	0x009c
                    009D    111 _RXIRQ	=	0x009d
                    009C    112 _TXRDY	=	0x009c
                    009D    113 _RXRDY	=	0x009d
                    0088    114 _T0IRQ	=	0x0088
                    008C    115 _T0ARL	=	0x008c
                    008D    116 _T0CEN	=	0x008d
                    00C0    117 _EIRQ0	=	0x00c0
                    00C1    118 _EIRQ1	=	0x00c1
                    00C2    119 _EIRQ2	=	0x00c2
                    00C3    120 _EIRQ3	=	0x00c3
                    00C4    121 _EIRQ4	=	0x00c4
                    00C5    122 _EIRQ5	=	0x00c5
                    00C6    123 _EIRQ6	=	0x00c6
                    00C7    124 _EIRQ7	=	0x00c7
                    0080    125 _P0_0	=	0x0080
                    0081    126 _P0_1	=	0x0081
                    0082    127 _P0_2	=	0x0082
                    0083    128 _P0_3	=	0x0083
                    0084    129 _P0_4	=	0x0084
                    0085    130 _P0_5	=	0x0085
                    0086    131 _P0_6	=	0x0086
                    0087    132 _P0_7	=	0x0087
                    0090    133 _P1_0	=	0x0090
                    0091    134 _P1_1	=	0x0091
                    0092    135 _P1_2	=	0x0092
                    0093    136 _P1_3	=	0x0093
                    0094    137 _P1_4	=	0x0094
                    0095    138 _P1_5	=	0x0095
                    0096    139 _P1_6	=	0x0096
                    0097    140 _P1_7	=	0x0097
                    00A0    141 _P2_0	=	0x00a0
                    00A1    142 _P2_1	=	0x00a1
                    00A2    143 _P2_2	=	0x00a2
                    00A3    144 _P2_3	=	0x00a3
                    00A4    145 _P2_4	=	0x00a4
                    00A5    146 _P2_5	=	0x00a5
                    00A6    147 _P2_6	=	0x00a6
                    00A7    148 _P2_7	=	0x00a7
                    00B0    149 _P3_0	=	0x00b0
                    00B1    150 _P3_1	=	0x00b1
                    00B2    151 _P3_2	=	0x00b2
                    00B3    152 _P3_3	=	0x00b3
                    00B4    153 _P3_4	=	0x00b4
                    00B5    154 _P3_5	=	0x00b5
                    00B6    155 _P3_6	=	0x00b6
                    00B7    156 _P3_7	=	0x00b7
                            157 ;--------------------------------------------------------
                            158 ; overlayable register banks
                            159 ;--------------------------------------------------------
                            160 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     161 	.ds 8
                            162 ;--------------------------------------------------------
                            163 ; internal ram data
                            164 ;--------------------------------------------------------
                            165 	.area DSEG    (DATA)
                            166 ;--------------------------------------------------------
                            167 ; overlayable items in internal ram 
                            168 ;--------------------------------------------------------
                            169 	.area	OSEG    (OVR,DATA)
                            170 ;--------------------------------------------------------
                            171 ; Stack segment in internal ram 
                            172 ;--------------------------------------------------------
                            173 	.area	SSEG	(DATA)
   0000                     174 __start__stack:
   0000                     175 	.ds	1
                            176 
                            177 ;--------------------------------------------------------
                            178 ; indirectly addressable internal ram data
                            179 ;--------------------------------------------------------
                            180 	.area ISEG    (DATA)
                            181 ;--------------------------------------------------------
                            182 ; absolute internal ram data
                            183 ;--------------------------------------------------------
                            184 	.area IABS    (ABS,DATA)
                            185 	.area IABS    (ABS,DATA)
                            186 ;--------------------------------------------------------
                            187 ; bit data
                            188 ;--------------------------------------------------------
                            189 	.area BSEG    (BIT)
                            190 ;--------------------------------------------------------
                            191 ; paged external ram data
                            192 ;--------------------------------------------------------
                            193 	.area PSEG    (PAG,XDATA)
                            194 ;--------------------------------------------------------
                            195 ; external ram data
                            196 ;--------------------------------------------------------
                            197 	.area XSEG    (XDATA)
                            198 ;--------------------------------------------------------
                            199 ; absolute external ram data
                            200 ;--------------------------------------------------------
                            201 	.area XABS    (ABS,XDATA)
                            202 ;--------------------------------------------------------
                            203 ; external initialized ram data
                            204 ;--------------------------------------------------------
                            205 	.area XISEG   (XDATA)
                            206 	.area HOME    (CODE)
                            207 	.area GSINIT0 (CODE)
                            208 	.area GSINIT1 (CODE)
                            209 	.area GSINIT2 (CODE)
                            210 	.area GSINIT3 (CODE)
                            211 	.area GSINIT4 (CODE)
                            212 	.area GSINIT5 (CODE)
                            213 	.area GSINIT  (CODE)
                            214 	.area GSFINAL (CODE)
                            215 	.area CSEG    (CODE)
                            216 ;--------------------------------------------------------
                            217 ; interrupt vector 
                            218 ;--------------------------------------------------------
                            219 	.area HOME    (CODE)
   0000                     220 __interrupt_vect:
   0000 02s00r00            221 	ljmp	__sdcc_gsinit_startup
                            222 ;--------------------------------------------------------
                            223 ; global & static initialisations
                            224 ;--------------------------------------------------------
                            225 	.area HOME    (CODE)
                            226 	.area GSINIT  (CODE)
                            227 	.area GSFINAL (CODE)
                            228 	.area GSINIT  (CODE)
                            229 	.globl __sdcc_gsinit_startup
                            230 	.globl __sdcc_program_startup
                            231 	.globl __start__stack
                            232 	.globl __mcs51_genXINIT
                            233 	.globl __mcs51_genXRAMCLEAR
                            234 	.globl __mcs51_genRAMCLEAR
                            235 	.area GSFINAL (CODE)
   0000 02s00r03            236 	ljmp	__sdcc_program_startup
                            237 ;--------------------------------------------------------
                            238 ; Home
                            239 ;--------------------------------------------------------
                            240 	.area HOME    (CODE)
                            241 	.area HOME    (CODE)
   0003                     242 __sdcc_program_startup:
   0003 12s00r00            243 	lcall	_main
                            244 ;	return from main will lock up
   0006 80 FE               245 	sjmp .
                            246 ;--------------------------------------------------------
                            247 ; code
                            248 ;--------------------------------------------------------
                            249 	.area CSEG    (CODE)
                            250 ;------------------------------------------------------------
                            251 ;Allocation info for local variables in function 'main'
                            252 ;------------------------------------------------------------
                            253 ;	src/hello.c:13: void main(void){
                            254 ;	-----------------------------------------
                            255 ;	 function main
                            256 ;	-----------------------------------------
   0000                     257 _main:
                    0007    258 	ar7 = 0x07
                    0006    259 	ar6 = 0x06
                    0005    260 	ar5 = 0x05
                    0004    261 	ar4 = 0x04
                    0003    262 	ar3 = 0x03
                    0002    263 	ar2 = 0x02
                    0001    264 	ar1 = 0x01
                    0000    265 	ar0 = 0x00
                            266 ;	src/hello.c:16: printf("\n\r");
   0000 74r00               267 	mov	a,#__str_0
   0002 C0 E0               268 	push	acc
   0004 74s00               269 	mov	a,#(__str_0 >> 8)
   0006 C0 E0               270 	push	acc
   0008 74 80               271 	mov	a,#0x80
   000A C0 E0               272 	push	acc
   000C 12s00r00            273 	lcall	_printf
   000F 15 81               274 	dec	sp
   0011 15 81               275 	dec	sp
   0013 15 81               276 	dec	sp
                            277 ;	src/hello.c:17: printf("Light52 project -- " __DATE__ "\n\n\r");
   0015 74r03               278 	mov	a,#__str_1
   0017 C0 E0               279 	push	acc
   0019 74s00               280 	mov	a,#(__str_1 >> 8)
   001B C0 E0               281 	push	acc
   001D 74 80               282 	mov	a,#0x80
   001F C0 E0               283 	push	acc
   0021 12s00r00            284 	lcall	_printf
   0024 15 81               285 	dec	sp
   0026 15 81               286 	dec	sp
   0028 15 81               287 	dec	sp
                            288 ;	src/hello.c:18: printf("Hello World!\n\r");
   002A 74r25               289 	mov	a,#__str_2
   002C C0 E0               290 	push	acc
   002E 74s00               291 	mov	a,#(__str_2 >> 8)
   0030 C0 E0               292 	push	acc
   0032 74 80               293 	mov	a,#0x80
   0034 C0 E0               294 	push	acc
   0036 12s00r00            295 	lcall	_printf
   0039 15 81               296 	dec	sp
   003B 15 81               297 	dec	sp
   003D 15 81               298 	dec	sp
                            299 ;	src/hello.c:20: while(1);
   003F                     300 00102$:
   003F 80 FE               301 	sjmp	00102$
                            302 ;------------------------------------------------------------
                            303 ;Allocation info for local variables in function 'putchar'
                            304 ;------------------------------------------------------------
                            305 ;c                         Allocated to registers r7 
                            306 ;------------------------------------------------------------
                            307 ;	src/hello.c:31: void putchar (char c) { 
                            308 ;	-----------------------------------------
                            309 ;	 function putchar
                            310 ;	-----------------------------------------
   0041                     311 _putchar:
   0041 AF 82               312 	mov	r7,dpl
                            313 ;	src/hello.c:32: while (!TXRDY);
   0043                     314 00101$:
   0043 30 9C FD            315 	jnb	_TXRDY,00101$
                            316 ;	src/hello.c:33: SBUF = c;
   0046 8F 99               317 	mov	_SBUF,r7
                            318 ;	src/hello.c:34: if(c=='\n'){
   0048 BF 0A 06            319 	cjne	r7,#0x0A,00109$
                            320 ;	src/hello.c:35: while (!TXRDY);
   004B                     321 00104$:
   004B 30 9C FD            322 	jnb	_TXRDY,00104$
                            323 ;	src/hello.c:36: SBUF = '\r';
   004E 75 99 0D            324 	mov	_SBUF,#0x0D
   0051                     325 00109$:
   0051 22                  326 	ret
                            327 	.area CSEG    (CODE)
                            328 	.area CONST   (CODE)
   0000                     329 __str_0:
   0000 0A                  330 	.db 0x0A
   0001 0D                  331 	.db 0x0D
   0002 00                  332 	.db 0x00
   0003                     333 __str_1:
   0003 4C 69 67 68 74 35   334 	.ascii "Light52 project -- Sep 30 2012"
        32 20 70 72 6F 6A
        65 63 74 20 2D 2D
        20 53 65 70 20 33
        30 20 32 30 31 32
   0021 0A                  335 	.db 0x0A
   0022 0A                  336 	.db 0x0A
   0023 0D                  337 	.db 0x0D
   0024 00                  338 	.db 0x00
   0025                     339 __str_2:
   0025 48 65 6C 6C 6F 20   340 	.ascii "Hello World!"
        57 6F 72 6C 64 21
   0031 0A                  341 	.db 0x0A
   0032 0D                  342 	.db 0x0D
   0033 00                  343 	.db 0x00
                            344 	.area XINIT   (CODE)
                            345 	.area CABS    (ABS,CODE)
