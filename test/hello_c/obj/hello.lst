                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Fri Sep 28 03:25:14 2012
                              5 ;--------------------------------------------------------
                              6 	.module hello
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _printf
                             14 	.globl _TXRDY
                             15 	.globl _SBUF
                             16 	.globl _SCON
                             17 	.globl _putchar
                             18 ;--------------------------------------------------------
                             19 ; special function registers
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                    0098     23 _SCON	=	0x0098
                    0099     24 _SBUF	=	0x0099
                             25 ;--------------------------------------------------------
                             26 ; special function bits
                             27 ;--------------------------------------------------------
                             28 	.area RSEG    (ABS,DATA)
   0000                      29 	.org 0x0000
                    009C     30 _TXRDY	=	0x009c
                             31 ;--------------------------------------------------------
                             32 ; overlayable register banks
                             33 ;--------------------------------------------------------
                             34 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      35 	.ds 8
                             36 ;--------------------------------------------------------
                             37 ; internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area DSEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; overlayable items in internal ram 
                             42 ;--------------------------------------------------------
                             43 	.area	OSEG    (OVR,DATA)
                             44 ;--------------------------------------------------------
                             45 ; Stack segment in internal ram 
                             46 ;--------------------------------------------------------
                             47 	.area	SSEG	(DATA)
   0000                      48 __start__stack:
   0000                      49 	.ds	1
                             50 
                             51 ;--------------------------------------------------------
                             52 ; indirectly addressable internal ram data
                             53 ;--------------------------------------------------------
                             54 	.area ISEG    (DATA)
                             55 ;--------------------------------------------------------
                             56 ; absolute internal ram data
                             57 ;--------------------------------------------------------
                             58 	.area IABS    (ABS,DATA)
                             59 	.area IABS    (ABS,DATA)
                             60 ;--------------------------------------------------------
                             61 ; bit data
                             62 ;--------------------------------------------------------
                             63 	.area BSEG    (BIT)
                             64 ;--------------------------------------------------------
                             65 ; paged external ram data
                             66 ;--------------------------------------------------------
                             67 	.area PSEG    (PAG,XDATA)
                             68 ;--------------------------------------------------------
                             69 ; external ram data
                             70 ;--------------------------------------------------------
                             71 	.area XSEG    (XDATA)
                             72 ;--------------------------------------------------------
                             73 ; absolute external ram data
                             74 ;--------------------------------------------------------
                             75 	.area XABS    (ABS,XDATA)
                             76 ;--------------------------------------------------------
                             77 ; external initialized ram data
                             78 ;--------------------------------------------------------
                             79 	.area XISEG   (XDATA)
                             80 	.area HOME    (CODE)
                             81 	.area GSINIT0 (CODE)
                             82 	.area GSINIT1 (CODE)
                             83 	.area GSINIT2 (CODE)
                             84 	.area GSINIT3 (CODE)
                             85 	.area GSINIT4 (CODE)
                             86 	.area GSINIT5 (CODE)
                             87 	.area GSINIT  (CODE)
                             88 	.area GSFINAL (CODE)
                             89 	.area CSEG    (CODE)
                             90 ;--------------------------------------------------------
                             91 ; interrupt vector 
                             92 ;--------------------------------------------------------
                             93 	.area HOME    (CODE)
   0000                      94 __interrupt_vect:
   0000 02s00r00             95 	ljmp	__sdcc_gsinit_startup
                             96 ;--------------------------------------------------------
                             97 ; global & static initialisations
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area GSINIT  (CODE)
                            101 	.area GSFINAL (CODE)
                            102 	.area GSINIT  (CODE)
                            103 	.globl __sdcc_gsinit_startup
                            104 	.globl __sdcc_program_startup
                            105 	.globl __start__stack
                            106 	.globl __mcs51_genXINIT
                            107 	.globl __mcs51_genXRAMCLEAR
                            108 	.globl __mcs51_genRAMCLEAR
                            109 	.area GSFINAL (CODE)
   0000 02s00r03            110 	ljmp	__sdcc_program_startup
                            111 ;--------------------------------------------------------
                            112 ; Home
                            113 ;--------------------------------------------------------
                            114 	.area HOME    (CODE)
                            115 	.area HOME    (CODE)
   0003                     116 __sdcc_program_startup:
   0003 12s00r00            117 	lcall	_main
                            118 ;	return from main will lock up
   0006 80 FE               119 	sjmp .
                            120 ;--------------------------------------------------------
                            121 ; code
                            122 ;--------------------------------------------------------
                            123 	.area CSEG    (CODE)
                            124 ;------------------------------------------------------------
                            125 ;Allocation info for local variables in function 'main'
                            126 ;------------------------------------------------------------
                            127 ;	src\hello.c:13: void main(void){
                            128 ;	-----------------------------------------
                            129 ;	 function main
                            130 ;	-----------------------------------------
   0000                     131 _main:
                    0007    132 	ar7 = 0x07
                    0006    133 	ar6 = 0x06
                    0005    134 	ar5 = 0x05
                    0004    135 	ar4 = 0x04
                    0003    136 	ar3 = 0x03
                    0002    137 	ar2 = 0x02
                    0001    138 	ar1 = 0x01
                    0000    139 	ar0 = 0x00
                            140 ;	src\hello.c:16: printf("\n\r");
   0000 74r00               141 	mov	a,#__str_0
   0002 C0 E0               142 	push	acc
   0004 74s00               143 	mov	a,#(__str_0 >> 8)
   0006 C0 E0               144 	push	acc
   0008 74 80               145 	mov	a,#0x80
   000A C0 E0               146 	push	acc
   000C 12s00r00            147 	lcall	_printf
   000F 15 81               148 	dec	sp
   0011 15 81               149 	dec	sp
   0013 15 81               150 	dec	sp
                            151 ;	src\hello.c:17: printf("Light52 project -- " __DATE__ "\n\n\r");
   0015 74r03               152 	mov	a,#__str_1
   0017 C0 E0               153 	push	acc
   0019 74s00               154 	mov	a,#(__str_1 >> 8)
   001B C0 E0               155 	push	acc
   001D 74 80               156 	mov	a,#0x80
   001F C0 E0               157 	push	acc
   0021 12s00r00            158 	lcall	_printf
   0024 15 81               159 	dec	sp
   0026 15 81               160 	dec	sp
   0028 15 81               161 	dec	sp
                            162 ;	src\hello.c:18: printf("Hello World!\n\r");
   002A 74r25               163 	mov	a,#__str_2
   002C C0 E0               164 	push	acc
   002E 74s00               165 	mov	a,#(__str_2 >> 8)
   0030 C0 E0               166 	push	acc
   0032 74 80               167 	mov	a,#0x80
   0034 C0 E0               168 	push	acc
   0036 12s00r00            169 	lcall	_printf
   0039 15 81               170 	dec	sp
   003B 15 81               171 	dec	sp
   003D 15 81               172 	dec	sp
                            173 ;	src\hello.c:20: while(1);
   003F                     174 00102$:
   003F 80 FE               175 	sjmp	00102$
                            176 ;------------------------------------------------------------
                            177 ;Allocation info for local variables in function 'putchar'
                            178 ;------------------------------------------------------------
                            179 ;c                         Allocated to registers r7 
                            180 ;------------------------------------------------------------
                            181 ;	src\hello.c:31: void putchar (char c) { 
                            182 ;	-----------------------------------------
                            183 ;	 function putchar
                            184 ;	-----------------------------------------
   0041                     185 _putchar:
   0041 AF 82               186 	mov	r7,dpl
                            187 ;	src\hello.c:32: while (!TXRDY);
   0043                     188 00101$:
   0043 30 9C FD            189 	jnb	_TXRDY,00101$
                            190 ;	src\hello.c:33: SBUF = c;
   0046 8F 99               191 	mov	_SBUF,r7
                            192 ;	src\hello.c:34: if(c=='\n'){
   0048 BF 0A 06            193 	cjne	r7,#0x0A,00109$
                            194 ;	src\hello.c:35: while (!TXRDY);
   004B                     195 00104$:
   004B 30 9C FD            196 	jnb	_TXRDY,00104$
                            197 ;	src\hello.c:36: SBUF = '\r';
   004E 75 99 0D            198 	mov	_SBUF,#0x0D
   0051                     199 00109$:
   0051 22                  200 	ret
                            201 	.area CSEG    (CODE)
                            202 	.area CONST   (CODE)
   0000                     203 __str_0:
   0000 0A                  204 	.db 0x0A
   0001 0D                  205 	.db 0x0D
   0002 00                  206 	.db 0x00
   0003                     207 __str_1:
   0003 4C 69 67 68 74 35   208 	.ascii "Light52 project -- Sep 28 2012"
        32 20 70 72 6F 6A
        65 63 74 20 2D 2D
        20 53 65 70 20 32
        38 20 32 30 31 32
   0021 0A                  209 	.db 0x0A
   0022 0A                  210 	.db 0x0A
   0023 0D                  211 	.db 0x0D
   0024 00                  212 	.db 0x00
   0025                     213 __str_2:
   0025 48 65 6C 6C 6F 20   214 	.ascii "Hello World!"
        57 6F 72 6C 64 21
   0031 0A                  215 	.db 0x0A
   0032 0D                  216 	.db 0x0D
   0033 00                  217 	.db 0x00
                            218 	.area XINIT   (CODE)
                            219 	.area CABS    (ABS,CODE)
